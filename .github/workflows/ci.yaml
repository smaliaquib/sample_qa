# name: CI Pipeline
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main 
# env:
#     AWS_REGION: ${{ secrets.AWS_REGION }}
#     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
#     IMAGE: qa-system
# jobs:  
#   terraform-validate:
#     name: Terraform Validate
#     runs-on: ubuntu-latest
#     environment: production
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
      
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#           aws-region: ${{ env.AWS_REGION }}
      
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.0.0
#           terraform_wrapper: false
      
#       - name: Terraform Init
#         working-directory: ./infrastructure
#         run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=${{ secrets.TF_STATE_KEY }}" -backend-config="region=${{ env.AWS_REGION }}"
      
#       - name: Terraform Format
#         working-directory: ./infrastructure
#         run: terraform fmt -check
      
#       - name: Terraform Validate
#         working-directory: ./infrastructure
#         run: terraform validate
      
#       - name: Terraform Plan
#         working-directory: ./infrastructure
#         run: terraform plan -var-file=vars/prod.tfvars -out=tfplan
        
#       - name: Archive Terraform Plan
#         if: github.event_name == 'pull_request'
#         uses: actions/upload-artifact@v2
#         with:
#           name: tfplan
#           path: ./infrastructure/tfplan

#   build-and-scan:
#     name: Build and Scan
#     runs-on: ubuntu-latest
#     environment: production
#     needs: terraform-validate

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
        
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         run: |
#          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.$AWS_REGION.amazonaws.com  
         
#       - name: Build Docker image
#         run: |
#           docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$GITHUB_SHA .
         
#       - name: Install Trivy
#         run: |
#           curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          
#       - name: Clean up disk space
#         run: |
#           sudo rm -rf /var/lib/apt/lists/*
#           sudo apt-get clean

#       - name: Scan Docker image with Trivy
#         run: |
#           trivy image --severity HIGH,CRITICAL ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$GITHUB_SHA

#       - name: Push Docker image to Amazon ECR
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: |
#           docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$GITHUB_SHA